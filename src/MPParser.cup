//import section

import java_cup.runtime.*;
import java.io.*;

parser code {:
   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
	  }
	  catch( Exception e )
	  {
		   System.out.println(e);
	  }
   }
:};


//Terminal symbols
terminal PROGRAM, BEGIN, END, INTEGER, CHAR, REAL, READ, WRITE, SWITCH, CASE, MOD;
terminal ID, CONST, PLUS, MUL, SUB, DIV, LEFTPAR, RIGHTPAR, DOTDOT, SEMI, COMMA, DOT, LEFTCURLY,RIGHTCURLY, EQUALS;

//Nonterminal symbols
non terminal Program, Block, VarSection, StatementList, VarDecl, Type, NameList, Statement, SwitchStatement, ExpressionList;
non terminal Assignment, Expression, AlternativeList,Alternative, AddOperator, Term, MulOperator, Factor ;




//Grammar

Program ::= PROGRAM ID Block
            {:
               System.out.println( "Redukcija po smeni 1." );
            :};

Block ::= BEGIN VarSection StatementList END
             {:
                System.out.println( "Redukcija po smeni 2." );
             :};

VarSection ::= VarSection VarDecl
            {:
               System.out.println( "Redukcija po smeni 3." );
            :}
            | VarDecl
            {:
                System.out.println( "Redukcija po smeni 4." );
             :};
VarDecl     ::= Type NameList SEMI
            {:
               System.out.println( "Redukcija po smeni 5." );
            :}
          ;

NameList ::= NameList COMMA ID
                {:
                   System.out.println( "Redukcija po smeni 6." );
                :}
                | ID
                {:
                    System.out.println( "Redukcija po smeni 7." );
                 :};

Type  ::= INTEGER
             {:
                System.out.println( "Redukcija po smeni 8." );
             :} 
           | CHAR
             {:
                System.out.println( "Redukcija po smeni 9." );
             :}
           | REAL
             {:
             System.out.println( "Redukcija po smeni 10." );
             :};

StatementList ::= StatementList Statement
        {:
           System.out.println( "Redukcija po smeni 11." );
        :}
      | Statement
        {:
           System.out.println( "Redukcija po smeni 12." );
        :};

Statement ::= SwitchStatement
         {:
            System.out.println( "Redukcija po smeni 13." );
         :}
          | Assignment SEMI
         {:
            System.out.println( "Redukcija po smeni 14." );
          :}
          | READ LEFTPAR NameList RIGHTPAR SEMI
          {:
                System.out.println( "Redukcija po smeni 15." );
           :}
           | WRITE LEFTPAR ExpressionList RIGHTPAR SEMI
           {:
                System.out.println( "Redukcija po smeni 16." );
            :}
            | Block
            {:
            System.out.println( "Redukcija po smeni 17." );
            :};

SwitchStatement  ::= SWITCH LEFTPAR Expression RIGHTPAR LEFTCURLY AlternativeList RIGHTCURLY
           {:
              System.out.println( "Redukcija po smeni 18." );
           :};
AlternativeList ::= AlternativeList Alternative
           {:
                System.out.println( "Redukcija po smeni 19." );
           :}
           | Alternative
           {:
                System.out.println( "Redukcija po smeni 20." );
           :};


Alternative  ::= CASE CONST DOTDOT StatementList
            {:
               System.out.println( "Redukcija po smeni 21." );
            :};
Assignment ::= ID EQUALS Expression
            {:
               System.out.println( "Redukcija po smeni 22." );
            :};

Expression  ::= Expression AddOperator Term
         {:
            System.out.println( "Redukcija po smeni 23." );
         :}
         | Term
         {:
            System.out.println( "Redukcija po smeni 24." );
         :};

AddOperator ::= PLUS
          {:
             System.out.println( "Redukcija po smeni 25." );
          :}
          | SUB
          {:
            System.out.println( "Redukcija po smeni 26." );
          :};

Term ::= Term MulOperator Factor
          {:
             System.out.println( "Redukcija po smeni 27." );
          :}
        | Factor
          {:
             System.out.println( "Redukcija po smeni 28." );
          :}
        ;

MulOperator  ::= MUL
           {:
              System.out.println( "Redukcija po smeni 29." );
           :}
         | DIV
           {:
              System.out.println( "Redukcija po smeni 30." );
           :}
           | MOD
            {:
                System.out.println( "Redukcija po smeni 31." );
            :}
         ;

Factor  ::= ID
           {:
              System.out.println( "Redukcija po smeni 32." );
           :}
         | CONST
           {:
              System.out.println( "Redukcija po smeni 33." );
           :}
         | LEFTPAR Expression RIGHTPAR
           {:
              System.out.println( "Redukcija po smeni 34." );
           :}
         ;

ExpressionList  ::= ExpressionList COMMA Expression
          {:
             System.out.println( "Redukcija po smeni 35." );
          :}
          |Expression
          {:
            System.out.println( "Redukcija po smeni 36." );
          :}
          ;


	





