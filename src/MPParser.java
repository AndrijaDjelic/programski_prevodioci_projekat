
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jan 18 08:02:45 CET 2022
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Tue Jan 18 08:02:45 CET 2022
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\003\005\000\002\002\004\000\002\004" +
    "\006\000\002\005\004\000\002\005\003\000\002\007\005" +
    "\000\002\011\005\000\002\011\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\006\004\000\002" +
    "\006\003\000\002\012\003\000\002\012\004\000\002\012" +
    "\007\000\002\012\007\000\002\012\003\000\002\013\011" +
    "\000\002\017\004\000\002\017\003\000\002\020\006\000" +
    "\002\015\005\000\002\016\005\000\002\016\003\000\002" +
    "\021\003\000\002\021\003\000\002\022\005\000\002\022" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\005\000" +
    "\002\014\005\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\004\005\001\002\000\004\002\112\001" +
    "\002\000\004\017\006\001\002\000\004\005\010\001\002" +
    "\000\004\002\001\001\002\000\010\007\012\010\016\011" +
    "\015\001\002\000\022\005\010\007\012\010\016\011\015" +
    "\012\024\013\034\014\035\017\033\001\002\000\004\017" +
    "\ufff9\001\002\000\004\017\017\001\002\000\022\005\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\017" +
    "\ufffd\001\002\000\004\017\ufff7\001\002\000\004\017\ufff8" +
    "\001\002\000\010\026\ufffa\030\ufffa\031\ufffa\001\002\000" +
    "\006\030\022\031\021\001\002\000\004\017\023\001\002" +
    "\000\022\005\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\017\ufffc\001\002\000\010\026\ufffb\030\ufffb" +
    "\031\ufffb\001\002\000\004\025\106\001\002\000\004\030" +
    "\105\001\002\000\022\005\ufff0\006\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\017\ufff0\034\ufff0\001\002\000\022\005" +
    "\ufff4\006\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4" +
    "\034\ufff4\001\002\000\016\005\010\006\104\012\024\013" +
    "\034\014\035\017\033\001\002\000\022\005\ufffe\007\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\017\ufffe\001" +
    "\002\000\022\005\ufff5\006\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\017\ufff5\034\ufff5\001\002\000\004\035\102\001" +
    "\002\000\004\025\073\001\002\000\004\025\036\001\002" +
    "\000\010\017\040\020\037\025\044\001\002\000\022\016" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\026\uffe0\030\uffe0" +
    "\031\uffe0\001\002\000\022\016\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\026\uffe1\030\uffe1\031\uffe1\001\002\000\022" +
    "\016\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\026\uffe5\030" +
    "\uffe5\031\uffe5\001\002\000\022\016\053\021\uffe9\022\054" +
    "\023\uffe9\024\056\026\uffe9\030\uffe9\031\uffe9\001\002\000" +
    "\010\021\051\023\047\026\060\001\002\000\010\017\040" +
    "\020\037\025\044\001\002\000\010\021\051\023\047\026" +
    "\046\001\002\000\022\016\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\026\uffdf\030\uffdf\031\uffdf\001\002\000\010\017" +
    "\uffe7\020\uffe7\025\uffe7\001\002\000\010\017\040\020\037" +
    "\025\044\001\002\000\010\017\uffe8\020\uffe8\025\uffe8\001" +
    "\002\000\022\016\053\021\uffea\022\054\023\uffea\024\056" +
    "\026\uffea\030\uffea\031\uffea\001\002\000\010\017\uffe2\020" +
    "\uffe2\025\uffe2\001\002\000\010\017\uffe4\020\uffe4\025\uffe4" +
    "\001\002\000\010\017\040\020\037\025\044\001\002\000" +
    "\010\017\uffe3\020\uffe3\025\uffe3\001\002\000\022\016\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\026\uffe6\030\uffe6\031" +
    "\uffe6\001\002\000\004\033\061\001\002\000\004\015\064" +
    "\001\002\000\006\015\064\034\071\001\002\000\006\015" +
    "\uffed\034\uffed\001\002\000\004\020\065\001\002\000\004" +
    "\027\066\001\002\000\014\005\010\012\024\013\034\014" +
    "\035\017\033\001\002\000\020\005\010\012\024\013\034" +
    "\014\035\015\uffec\017\033\034\uffec\001\002\000\022\005" +
    "\ufff6\006\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\017\ufff6" +
    "\034\ufff6\001\002\000\022\005\uffef\006\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\017\uffef\034\uffef\001\002\000\006" +
    "\015\uffee\034\uffee\001\002\000\010\017\040\020\037\025" +
    "\044\001\002\000\012\021\051\023\047\026\uffdd\031\uffdd" +
    "\001\002\000\006\026\077\031\076\001\002\000\010\017" +
    "\040\020\037\025\044\001\002\000\004\030\100\001\002" +
    "\000\022\005\ufff1\006\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\017\ufff1\034\ufff1\001\002\000\012\021\051\023\047" +
    "\026\uffde\031\uffde\001\002\000\010\017\040\020\037\025" +
    "\044\001\002\000\010\021\051\023\047\030\uffeb\001\002" +
    "\000\024\002\uffff\005\uffff\006\uffff\012\uffff\013\uffff\014" +
    "\uffff\015\uffff\017\uffff\034\uffff\001\002\000\022\005\ufff3" +
    "\006\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\017\ufff3\034" +
    "\ufff3\001\002\000\004\017\017\001\002\000\006\026\110" +
    "\031\021\001\002\000\004\030\111\001\002\000\022\005" +
    "\ufff2\006\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2" +
    "\034\ufff2\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\006\001\001\000\002\001\001" +
    "\000\010\005\010\007\013\010\012\001\001\000\020\004" +
    "\025\006\027\007\030\010\012\012\031\013\026\015\024" +
    "\001\001\000\002\001\001\000\004\011\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\025\012" +
    "\067\013\026\015\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\042\022\041\024\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\054\001\001\000\004\021\047\001\001\000\010\016\044" +
    "\022\041\024\040\001\001\000\004\021\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\051\024\040" +
    "\001\001\000\002\001\001\000\004\023\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\061\020\062\001\001\000\004\020\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\025\006\066\012\031\013\026\015\024\001\001" +
    "\000\012\004\025\012\067\013\026\015\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\074\016\073\022\041\024\040\001\001\000\004\021" +
    "\047\001\001\000\002\001\001\000\010\016\100\022\041" +
    "\024\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\047\001\001\000\010\016\102\022\041\024\040" +
    "\001\001\000\004\021\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
	  }
	  catch( Exception e )
	  {
		   System.out.println(e);
	  }
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpressionList ::= Expression 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 36." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*ExpressionList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              Object RESULT = null;
		
             System.out.println( "Redukcija po smeni 35." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*ExpressionList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Factor ::= LEFTPAR Expression RIGHTPAR 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 34." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(18/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Factor ::= CONST 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 33." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(18/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Factor ::= ID 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 32." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(18/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MulOperator ::= MOD 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 31." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*MulOperator*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MulOperator ::= DIV 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 30." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*MulOperator*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MulOperator ::= MUL 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 29." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*MulOperator*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Term ::= Factor 
            {
              Object RESULT = null;
		
             System.out.println( "Redukcija po smeni 28." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Term ::= Term MulOperator Factor 
            {
              Object RESULT = null;
		
             System.out.println( "Redukcija po smeni 27." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AddOperator ::= SUB 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 26." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AddOperator ::= PLUS 
            {
              Object RESULT = null;
		
             System.out.println( "Redukcija po smeni 25." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*AddOperator*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expression ::= Term 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 24." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expression ::= Expression AddOperator Term 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 23." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Assignment ::= ID EQUALS Expression 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 22." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Alternative ::= CASE CONST DOTDOT StatementList 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 21." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Alternative*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // AlternativeList ::= Alternative 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 20." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*AlternativeList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // AlternativeList ::= AlternativeList Alternative 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 19." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*AlternativeList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SwitchStatement ::= SWITCH LEFTPAR Expression RIGHTPAR LEFTCURLY AlternativeList RIGHTCURLY 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 18." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*SwitchStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= Block 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 17." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statement ::= WRITE LEFTPAR ExpressionList RIGHTPAR SEMI 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 16." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statement ::= READ LEFTPAR NameList RIGHTPAR SEMI 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 15." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Statement ::= Assignment SEMI 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 14." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= SwitchStatement 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 13." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // StatementList ::= Statement 
            {
              Object RESULT = null;
		
           System.out.println( "Redukcija po smeni 12." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
           System.out.println( "Redukcija po smeni 11." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              Object RESULT = null;
		
             System.out.println( "Redukcija po smeni 10." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= CHAR 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 9." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INTEGER 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 8." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NameList ::= ID 
            {
              Object RESULT = null;
		
                    System.out.println( "Redukcija po smeni 7." );
                 
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;
		
                   System.out.println( "Redukcija po smeni 6." );
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecl ::= Type NameList SEMI 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 5." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarSection ::= VarDecl 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 4." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*VarSection*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarSection ::= VarSection VarDecl 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 3." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*VarSection*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= BEGIN VarSection StatementList END 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 2." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ID Block 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 1." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

